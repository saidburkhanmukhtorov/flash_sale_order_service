// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule/order_service/basket_items.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasketItemService_CreateBasketItem_FullMethodName = "/order_service.BasketItemService/CreateBasketItem"
	BasketItemService_GetBasketItem_FullMethodName    = "/order_service.BasketItemService/GetBasketItem"
	BasketItemService_DeleteBasketItem_FullMethodName = "/order_service.BasketItemService/DeleteBasketItem"
	BasketItemService_ListBasketItems_FullMethodName  = "/order_service.BasketItemService/ListBasketItems"
)

// BasketItemServiceClient is the client API for BasketItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BasketItemService defines the gRPC service for managing basket items.
type BasketItemServiceClient interface {
	CreateBasketItem(ctx context.Context, in *CreateBasketItemRequest, opts ...grpc.CallOption) (*CreateBasketItemResponse, error)
	GetBasketItem(ctx context.Context, in *GetBasketItemRequest, opts ...grpc.CallOption) (*GetBasketItemResponse, error)
	DeleteBasketItem(ctx context.Context, in *DeleteBasketItemRequest, opts ...grpc.CallOption) (*DeleteBasketItemResponse, error)
	ListBasketItems(ctx context.Context, in *ListBasketItemsRequest, opts ...grpc.CallOption) (*ListBasketItemsResponse, error)
}

type basketItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketItemServiceClient(cc grpc.ClientConnInterface) BasketItemServiceClient {
	return &basketItemServiceClient{cc}
}

func (c *basketItemServiceClient) CreateBasketItem(ctx context.Context, in *CreateBasketItemRequest, opts ...grpc.CallOption) (*CreateBasketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBasketItemResponse)
	err := c.cc.Invoke(ctx, BasketItemService_CreateBasketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketItemServiceClient) GetBasketItem(ctx context.Context, in *GetBasketItemRequest, opts ...grpc.CallOption) (*GetBasketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasketItemResponse)
	err := c.cc.Invoke(ctx, BasketItemService_GetBasketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketItemServiceClient) DeleteBasketItem(ctx context.Context, in *DeleteBasketItemRequest, opts ...grpc.CallOption) (*DeleteBasketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBasketItemResponse)
	err := c.cc.Invoke(ctx, BasketItemService_DeleteBasketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketItemServiceClient) ListBasketItems(ctx context.Context, in *ListBasketItemsRequest, opts ...grpc.CallOption) (*ListBasketItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBasketItemsResponse)
	err := c.cc.Invoke(ctx, BasketItemService_ListBasketItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketItemServiceServer is the server API for BasketItemService service.
// All implementations must embed UnimplementedBasketItemServiceServer
// for forward compatibility.
//
// BasketItemService defines the gRPC service for managing basket items.
type BasketItemServiceServer interface {
	CreateBasketItem(context.Context, *CreateBasketItemRequest) (*CreateBasketItemResponse, error)
	GetBasketItem(context.Context, *GetBasketItemRequest) (*GetBasketItemResponse, error)
	DeleteBasketItem(context.Context, *DeleteBasketItemRequest) (*DeleteBasketItemResponse, error)
	ListBasketItems(context.Context, *ListBasketItemsRequest) (*ListBasketItemsResponse, error)
	mustEmbedUnimplementedBasketItemServiceServer()
}

// UnimplementedBasketItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasketItemServiceServer struct{}

func (UnimplementedBasketItemServiceServer) CreateBasketItem(context.Context, *CreateBasketItemRequest) (*CreateBasketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasketItem not implemented")
}
func (UnimplementedBasketItemServiceServer) GetBasketItem(context.Context, *GetBasketItemRequest) (*GetBasketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketItem not implemented")
}
func (UnimplementedBasketItemServiceServer) DeleteBasketItem(context.Context, *DeleteBasketItemRequest) (*DeleteBasketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasketItem not implemented")
}
func (UnimplementedBasketItemServiceServer) ListBasketItems(context.Context, *ListBasketItemsRequest) (*ListBasketItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasketItems not implemented")
}
func (UnimplementedBasketItemServiceServer) mustEmbedUnimplementedBasketItemServiceServer() {}
func (UnimplementedBasketItemServiceServer) testEmbeddedByValue()                           {}

// UnsafeBasketItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketItemServiceServer will
// result in compilation errors.
type UnsafeBasketItemServiceServer interface {
	mustEmbedUnimplementedBasketItemServiceServer()
}

func RegisterBasketItemServiceServer(s grpc.ServiceRegistrar, srv BasketItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedBasketItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasketItemService_ServiceDesc, srv)
}

func _BasketItemService_CreateBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketItemServiceServer).CreateBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketItemService_CreateBasketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketItemServiceServer).CreateBasketItem(ctx, req.(*CreateBasketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketItemService_GetBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketItemServiceServer).GetBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketItemService_GetBasketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketItemServiceServer).GetBasketItem(ctx, req.(*GetBasketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketItemService_DeleteBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketItemServiceServer).DeleteBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketItemService_DeleteBasketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketItemServiceServer).DeleteBasketItem(ctx, req.(*DeleteBasketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketItemService_ListBasketItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasketItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketItemServiceServer).ListBasketItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketItemService_ListBasketItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketItemServiceServer).ListBasketItems(ctx, req.(*ListBasketItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketItemService_ServiceDesc is the grpc.ServiceDesc for BasketItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.BasketItemService",
	HandlerType: (*BasketItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBasketItem",
			Handler:    _BasketItemService_CreateBasketItem_Handler,
		},
		{
			MethodName: "GetBasketItem",
			Handler:    _BasketItemService_GetBasketItem_Handler,
		},
		{
			MethodName: "DeleteBasketItem",
			Handler:    _BasketItemService_DeleteBasketItem_Handler,
		},
		{
			MethodName: "ListBasketItems",
			Handler:    _BasketItemService_ListBasketItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/order_service/basket_items.proto",
}
