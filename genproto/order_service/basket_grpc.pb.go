// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule/order_service/basket.proto

package order_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasketService_CreateBasket_FullMethodName       = "/order_service.BasketService/CreateBasket"
	BasketService_GetBasket_FullMethodName          = "/order_service.BasketService/GetBasket"
	BasketService_UpdateBasket_FullMethodName       = "/order_service.BasketService/UpdateBasket"
	BasketService_DeleteBasket_FullMethodName       = "/order_service.BasketService/DeleteBasket"
	BasketService_ListBaskets_FullMethodName        = "/order_service.BasketService/ListBaskets"
	BasketService_UpdateBasketStatus_FullMethodName = "/order_service.BasketService/UpdateBasketStatus"
)

// BasketServiceClient is the client API for BasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BasketService defines the gRPC service for managing baskets.
type BasketServiceClient interface {
	CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*CreateBasketResponse, error)
	GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*GetBasketResponse, error)
	UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error)
	DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error)
	ListBaskets(ctx context.Context, in *ListBasketsRequest, opts ...grpc.CallOption) (*ListBasketsResponse, error)
	UpdateBasketStatus(ctx context.Context, in *UpdateBasketStatusRequest, opts ...grpc.CallOption) (*UpdateBasketStatusResponse, error)
}

type basketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketServiceClient(cc grpc.ClientConnInterface) BasketServiceClient {
	return &basketServiceClient{cc}
}

func (c *basketServiceClient) CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*CreateBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_CreateBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*GetBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_GetBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*UpdateBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_UpdateBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_DeleteBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) ListBaskets(ctx context.Context, in *ListBasketsRequest, opts ...grpc.CallOption) (*ListBasketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBasketsResponse)
	err := c.cc.Invoke(ctx, BasketService_ListBaskets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateBasketStatus(ctx context.Context, in *UpdateBasketStatusRequest, opts ...grpc.CallOption) (*UpdateBasketStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBasketStatusResponse)
	err := c.cc.Invoke(ctx, BasketService_UpdateBasketStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServiceServer is the server API for BasketService service.
// All implementations must embed UnimplementedBasketServiceServer
// for forward compatibility.
//
// BasketService defines the gRPC service for managing baskets.
type BasketServiceServer interface {
	CreateBasket(context.Context, *CreateBasketRequest) (*CreateBasketResponse, error)
	GetBasket(context.Context, *GetBasketRequest) (*GetBasketResponse, error)
	UpdateBasket(context.Context, *UpdateBasketRequest) (*UpdateBasketResponse, error)
	DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error)
	ListBaskets(context.Context, *ListBasketsRequest) (*ListBasketsResponse, error)
	UpdateBasketStatus(context.Context, *UpdateBasketStatusRequest) (*UpdateBasketStatusResponse, error)
	mustEmbedUnimplementedBasketServiceServer()
}

// UnimplementedBasketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasketServiceServer struct{}

func (UnimplementedBasketServiceServer) CreateBasket(context.Context, *CreateBasketRequest) (*CreateBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasket not implemented")
}
func (UnimplementedBasketServiceServer) GetBasket(context.Context, *GetBasketRequest) (*GetBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedBasketServiceServer) UpdateBasket(context.Context, *UpdateBasketRequest) (*UpdateBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasket not implemented")
}
func (UnimplementedBasketServiceServer) DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasket not implemented")
}
func (UnimplementedBasketServiceServer) ListBaskets(context.Context, *ListBasketsRequest) (*ListBasketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaskets not implemented")
}
func (UnimplementedBasketServiceServer) UpdateBasketStatus(context.Context, *UpdateBasketStatusRequest) (*UpdateBasketStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasketStatus not implemented")
}
func (UnimplementedBasketServiceServer) mustEmbedUnimplementedBasketServiceServer() {}
func (UnimplementedBasketServiceServer) testEmbeddedByValue()                       {}

// UnsafeBasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServiceServer will
// result in compilation errors.
type UnsafeBasketServiceServer interface {
	mustEmbedUnimplementedBasketServiceServer()
}

func RegisterBasketServiceServer(s grpc.ServiceRegistrar, srv BasketServiceServer) {
	// If the following call pancis, it indicates UnimplementedBasketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasketService_ServiceDesc, srv)
}

func _BasketService_CreateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).CreateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_CreateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).CreateBasket(ctx, req.(*CreateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasket(ctx, req.(*GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateBasket(ctx, req.(*UpdateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_DeleteBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).DeleteBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_DeleteBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).DeleteBasket(ctx, req.(*DeleteBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_ListBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).ListBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_ListBaskets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).ListBaskets(ctx, req.(*ListBasketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateBasketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateBasketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateBasketStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateBasketStatus(ctx, req.(*UpdateBasketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketService_ServiceDesc is the grpc.ServiceDesc for BasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.BasketService",
	HandlerType: (*BasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBasket",
			Handler:    _BasketService_CreateBasket_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _BasketService_GetBasket_Handler,
		},
		{
			MethodName: "UpdateBasket",
			Handler:    _BasketService_UpdateBasket_Handler,
		},
		{
			MethodName: "DeleteBasket",
			Handler:    _BasketService_DeleteBasket_Handler,
		},
		{
			MethodName: "ListBaskets",
			Handler:    _BasketService_ListBaskets_Handler,
		},
		{
			MethodName: "UpdateBasketStatus",
			Handler:    _BasketService_UpdateBasketStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/order_service/basket.proto",
}
